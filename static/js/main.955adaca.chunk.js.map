{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReadyGoods","goods","sortText","readyGoods","sort","good1","good2","alphabet","localeCompare","length","App","useState","setSortText","reverseText","setReverseText","sortedGoods","reverse","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAaF,SAASC,EAAcC,EAAvB,GAAmE,IAAzBC,EAAwB,EAAxBA,SAClCC,EAAU,YAAOF,GAiBvB,OAfIC,GACFC,EAAWC,MAAK,SAACC,EAAOC,GACtB,OAAQJ,GACN,KAAKJ,EAASS,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKR,EAASW,OACZ,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKRN,G,SA5BJL,K,oBAAAA,E,gBAAAA,E,mBAAAA,M,KA+BE,IAAMY,EAAgB,WAC3B,MAAgCC,mBAAS,IAAzC,mBAAOT,EAAP,KAAiBU,EAAjB,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KACIC,EAAcf,EAAcD,EAAiB,CAAEG,aAWnD,OATIA,IAAaJ,EAASkB,SAAWH,IAAgBf,EAASkB,QAC5DD,EAAcA,EAAYC,UACjBH,IAAgBf,EAASkB,QAClCD,EAAchB,EAAgBiB,UACrBd,IAAaJ,EAASS,UAC5BM,IAAgBf,EAASkB,UAC5BD,EAAcf,EAAce,EAAa,CAAEb,cAI3C,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMN,EAAYd,EAASS,WACpCY,KAAK,SACLF,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYlB,IAAaJ,EAASS,WAJtC,iCAUA,wBACEW,QAAS,kBAAMN,EAAYd,EAASW,SACpCU,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYlB,IAAaJ,EAASW,SAJtC,4BAUA,wBACES,QAASL,EAAc,WACrBC,EAAe,KACb,WACFA,EAAehB,EAASkB,UAE1BG,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYP,IAAgBf,EAASkB,UARzC,sBAcEd,GAAYW,IACZ,wBACEK,QAAS,WACPN,EAAY,IACZE,EAAe,KAEjBK,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGF,EAAYM,KAAI,SAAAC,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCnHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.955adaca.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  alphabet = 'alphabet',\n  length = 'length',\n  reverse = 'reverse',\n}\n\ninterface SomeParams{\n  sortText: string;\n}\n\nfunction getReadyGoods(goods: string[], { sortText }: SomeParams) {\n  const readyGoods = [...goods];\n\n  if (sortText) {\n    readyGoods.sort((good1, good2) => {\n      switch (sortText) {\n        case SortType.alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return readyGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortText, setSortText] = useState('');\n  const [reverseText, setReverseText] = useState('');\n  let sortedGoods = getReadyGoods(goodsFromServer, { sortText });\n\n  if (sortText !== SortType.reverse && reverseText === SortType.reverse) {\n    sortedGoods = sortedGoods.reverse();\n  } else if (reverseText === SortType.reverse) {\n    sortedGoods = goodsFromServer.reverse();\n  } else if (sortText === SortType.alphabet\n    && reverseText === SortType.reverse) {\n    sortedGoods = getReadyGoods(sortedGoods, { sortText });\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortText(SortType.alphabet)}\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortText !== SortType.alphabet,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortText(SortType.length)}\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortText !== SortType.length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={reverseText ? () => {\n            setReverseText('');\n          } : () => {\n            setReverseText(SortType.reverse);\n          }}\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': reverseText !== SortType.reverse,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortText || reverseText) && (\n          <button\n            onClick={() => {\n              setSortText('');\n              setReverseText('');\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}