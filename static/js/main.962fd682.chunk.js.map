{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReadyGoods","goods","sortText","reverseText","readyGoods","sort","good1","good2","alphabet","localeCompare","length","reverse","App","useState","setSortText","setReverseText","sortedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcF,SAASC,EAAcC,EAAvB,GAAgF,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,YAC9CC,EAAU,YAAOH,GA0BrB,OAxBIC,GACFE,EAAWC,MAAK,SAACC,EAAOC,GACtB,OAAQL,GACN,KAAKJ,EAASU,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKT,EAASY,OACZ,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKXR,IAAaJ,EAASa,SAAWR,IAAgBL,EAASa,QAC5DP,EAAaA,EAAWO,UACfR,IAAgBL,EAASa,QAClCP,EAAaL,EAAgBY,UACpBT,IAAaJ,EAASU,UAC5BL,IAAgBL,EAASa,UAC5BP,EAAaJ,EAAcI,EAAY,CAAEF,WAAUC,iBAG9CC,G,SAtCJN,K,oBAAAA,E,gBAAAA,E,mBAAAA,M,KAyCE,IAAMc,EAAgB,WAC3B,MAAgCC,mBAAS,IAAzC,mBAAOX,EAAP,KAAiBY,EAAjB,KACA,EAAsCD,mBAAS,IAA/C,mBAAOV,EAAP,KAAoBY,EAApB,KACMC,EAAchB,EAAcD,EAAiB,CAAEG,WAAUC,gBAe/D,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMJ,EAAYhB,EAASU,WACpCW,KAAK,SACLF,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYlB,IAAaJ,EAASU,WAJtC,iCAUA,wBACEU,QAAS,kBAAMJ,EAAYhB,EAASY,SACpCS,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYlB,IAAaJ,EAASY,SAJtC,4BAUA,wBACEQ,QArCR,WAEIH,EADEZ,EACa,GAEAL,EAASa,UAkCpBQ,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYjB,IAAgBL,EAASa,UAJzC,sBAUET,GAAYC,IACZ,wBACEe,QAxCV,WACEJ,EAAY,IACZC,EAAe,KAuCPI,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGD,EAAYK,KAAI,SAAAC,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC1HjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.962fd682.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  alphabet = 'alphabet',\n  length = 'length',\n  reverse = 'reverse',\n}\n\ninterface SomeParams{\n  sortText: string;\n  reverseText: string;\n}\n\nfunction getReadyGoods(goods: string[], { sortText, reverseText }: SomeParams) {\n  let readyGoods = [...goods];\n\n  if (sortText) {\n    readyGoods.sort((good1, good2) => {\n      switch (sortText) {\n        case SortType.alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (sortText !== SortType.reverse && reverseText === SortType.reverse) {\n    readyGoods = readyGoods.reverse();\n  } else if (reverseText === SortType.reverse) {\n    readyGoods = goodsFromServer.reverse();\n  } else if (sortText === SortType.alphabet\n    && reverseText === SortType.reverse) {\n    readyGoods = getReadyGoods(readyGoods, { sortText, reverseText });\n  }\n\n  return readyGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortText, setSortText] = useState('');\n  const [reverseText, setReverseText] = useState('');\n  const sortedGoods = getReadyGoods(goodsFromServer, { sortText, reverseText });\n\n  function reverseFunc() {\n    if (reverseText) {\n      setReverseText('');\n    } else {\n      setReverseText(SortType.reverse);\n    }\n  }\n\n  function resetFunc() {\n    setSortText('');\n    setReverseText('');\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortText(SortType.alphabet)}\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortText !== SortType.alphabet,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortText(SortType.length)}\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortText !== SortType.length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={reverseFunc}\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': reverseText !== SortType.reverse,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortText || reverseText) && (\n          <button\n            onClick={resetFunc}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}